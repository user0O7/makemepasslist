// main.cc

#include <iostream>
#include <random>
#include <vector>
#include <limits>

#define COLLISION 1 // set to zero for dissable check double passwords here

namespace {

std::string generate_new_password(const std::string a, const size_t n) {
#if COLLISION
  static size_t collision = 0;
  static std::vector<std::string> history;
#endif
  if (a.size() <= 1)
    return "error"; // ошибка если алфавит слишком маленький
  std::string ret;
  {
    std::random_device rd;  // a seed source for the random number engine
    std::mt19937 gen(rd()); // mersenne_twister_engine seeded with rd()
    auto max = a.size();
    max--;
    std::uniform_int_distribution<> distrib(0, max);

    // Use distrib to transform the random unsigned int
    // generated by gen into an int in [?, ?]
    for (int i = 0; i != n; ++i)
      ret.push_back(a[distrib(gen)]);
  }
#if COLLISION
  if (history.size() == 0) {
    history.push_back(ret);
    return ret;
  }
  for (auto &s : history) {
    if (s == ret) {
      collision++;
      if (collision >= 10000) {
        std::cerr << "collision!!";
        std::exit(EXIT_FAILURE);
      }
      return generate_new_password(a, n);
    }
  }
  history.push_back(ret);
#endif
  return ret;
}

struct Terminal {
  std::string cmd;
  void read() {
    std::cout << '>';
    std::cin >> cmd;
  }
};

template <typename T = int> T string_to(const std::string &s) {
  T number = 0;
  while (number != std::numeric_limits<T>::max()) {
    if (s == (std::to_string(number)))
      return number;
    number++;
  }
  return number;
}

int command_line_loop() {
  Terminal t;
  while (true) {
    t.read();
    if (t.cmd == "exit")
      return EXIT_SUCCESS;
    if (t.cmd == "n8")
      std::cout << generate_new_password("1234567890", 8) << std::endl;
    if (t.cmd == "a8")
      std::cout << generate_new_password("qwertyuiopasdfghjklzxcvbnm", 8)
                << std::endl;
    if (t.cmd == "A8")
      std::cout << generate_new_password("QWERTYUIOPASDFGHJKLZXCVBNM", 8)
                << std::endl;
  }
}

} // namespace

int main(int argc, char **argv, char **envp) {
  if (argc == 3) {
    std::cout << generate_new_password(std::string(argv[1]),
                                       string_to<int>(std::string(argv[2])))
              << std::endl;
    return EXIT_SUCCESS;
  }
  if (argc == 4) {
    int count = string_to<int>(std::string(argv[3]));
    int sz = string_to<int>(std::string(argv[2]));
    while (count-- != 0)
      std::cout << generate_new_password(std::string(argv[1]), sz) << std::endl;
    return EXIT_SUCCESS;
  }
  if (argc == 1)
    return command_line_loop();
  return EXIT_FAILURE;
}

// EOF
